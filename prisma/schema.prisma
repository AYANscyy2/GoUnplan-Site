generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String?           @unique
  name             String
  bio              String?           @default("Travelling with vibe")
  phone            String?           @unique
  password         String?
  role             Role              @default(USER)
  image            String?           @default("https://avatar.iran.liara.run/public")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  appliedForHost   Boolean           @default(false)
  isEmailVerified  Boolean           @default(false)
  resetToken       String?
  resetTokenExpiry DateTime?
  bookings         Booking[]
  chatParticipants ChatParticipant[]
  hostProfile      HostProfile?
  receivedMessages Message[]         @relation("ReceivedMessages")
  sentMessages     Message[]         @relation("SentMessages")
  reviews          Review[]
  supportTickets   SupportTicket[]
  assignedTickets  SupportTicket[]   @relation("AssignedTickets")
  ticketMessages   TicketMessage[]   @relation("TicketMessages")

  @@map("users")
}

model HostProfile {
  hostId                 String        @id @default(cuid())
  description            String?
  image                  String?       @default("https://avatar.iran.liara.run/public")
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  hostEmail              String        @unique
  hostMobile             String
  averageRating          Float         @default(0)
  reviewCount            Int           @default(0)
  languages              String[]      @default([])
  instagramUrl           String?
  linkedinUrl            String?
  twitterUrl             String?
  websiteUrl             String?
  hostCity               String?
  plannedHostingMonths   String[]      @default([])
  plannedHostingLocation String?
  user                   User          @relation(fields: [hostId], references: [id], onDelete: Cascade)
  reviews                Review[]
  travelPlans            TravelPlans[]

  @@map("host_profiles")
}

model DayWiseItinerary {
  id            String      @id @default(cuid())
  dayNumber     Int
  title         String
  description   String
  destination   String      @default("")
  activities    String[]    @default([])
  meals         String?
  accommodation String?
  travelPlanId  String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  dayWiseImage  String?     @default("https://avatar.iran.liara.run/public")
  travelPlan    TravelPlans @relation(fields: [travelPlanId], references: [travelPlanId], onDelete: Cascade)

  @@map("day_wise_itineraries")
}

model TravelPlans {
  travelPlanId          String             @id @default(cuid())
  title                 String
  description           String
  includedActivities    String[]
  restrictions          String[]
  special               String[]
  noOfDays              Int
  hostId                String
  price                 Int
  activities            String[]           @default([])
  country               String
  state                 String
  city                  String
  status                TravelPlanStatus   @default(INACTIVE)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  maxParticipants       Int                @default(10)
  destination           String?
  filters               String[]           @default([])
  languages             String[]           @default([])
  stops                 String[]           @default([])
  genderPreference      GenderPreference   @default(MIX)
  endDate               DateTime?
  startDate             DateTime?
  averageRating         Float              @default(0)
  reviewCount           Int                @default(0)
  tripImage             String?            @default("https://avatar.iran.liara.run/public")
  notIncludedActivities String[]
  bookings              Booking[]
  dayWiseItinerary      DayWiseItinerary[]
  reviews               Review[]
  host                  HostProfile        @relation(fields: [hostId], references: [hostId], onDelete: Cascade)

  @@map("travel_plans")
}

model TeamMember {
  id          String   @id @default(cuid())
  isteamLead  Boolean
  phone       String
  firstName   String
  lastName    String
  memberEmail String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([bookingId, memberEmail])
  @@map("team_members")
}

model Booking {
  id                  String           @id @default(cuid())
  userId              String
  travelPlanId        String
  startDate           DateTime
  endDate             DateTime
  totalPrice          Int
  participants        Int              @default(1)
  status              BookingStatus    @default(PENDING)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  cancelledAt         DateTime?
  pricePerPerson      Int
  refundAmount        Int              @default(0)
  specialRequirements String?
  formSubmitted       Boolean          @default(false)
  isReviewed          Boolean          @default(false)
  amountPaid          Int              @default(0)
  minPaymentAmount    Int?
  paymentDeadline     DateTime?
  paymentStatus       PaymentStatus    @default(PENDING)
  remainingAmount     Int              @default(0)
  razorpayOrderId     String?
  razorpayPaymentId   String?
  travelPlan          TravelPlans      @relation(fields: [travelPlanId], references: [travelPlanId])
  user                User             @relation(fields: [userId], references: [id])
  partialPayments     PartialPayment[]
  review              Review?
  guests              TeamMember[]
  supportTickets      SupportTicket[]

  @@map("bookings")
}

model PartialPayment {
  id          String      @id @default(cuid())
  bookingId   String
  amount      Int
  paymentDate DateTime    @default(now())
  paymentType PaymentType @default(PARTIAL)
  booking     Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("partial_payments")
}

model WaitingList {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("waiting_list")
}

model Review {
  id           String      @id @default(cuid())
  userId       String
  bookingId    String      @unique
  travelPlanId String
  hostId       String
  rating       Int         @default(0)
  comment      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  booking      Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  host         HostProfile @relation(fields: [hostId], references: [hostId], onDelete: Cascade)
  travelPlan   TravelPlans @relation(fields: [travelPlanId], references: [travelPlanId], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Chat {
  id            String            @id @default(cuid())
  travelPlanId  String?
  lastMessageAt DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  participants  ChatParticipant[]
  messages      Message[]

  @@map("chats")
}

model ChatParticipant {
  id         String   @id @default(cuid())
  chatId     String
  userId     String
  joinedAt   DateTime @default(now())
  lastReadAt DateTime @default(now())
  isActive   Boolean  @default(true)
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id         String      @id @default(cuid())
  chatId     String
  senderId   String
  receiverId String
  content    String
  type       MessageType @default(TEXT)
  isRead     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  chat       Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  receiver   User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId, createdAt])
  @@index([receiverId, isRead])
  @@map("messages")
}

model Otp {
  id        String   @id @default(cuid())
  phone     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([phone])
  @@index([phone, code])
}

model Contact {
  id        String         @id @default(cuid())
  name      String
  email     String
  subject   ContactSubject
  message   String
  status    ContactStatus  @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("contacts")
}

model SupportTicket {
  id          String              @id @default(cuid())
  userId      String
  bookingId   String?
  title       String
  description String
  category    SupportCategory     @default(GENERAL)
  priority    SupportPriority     @default(MEDIUM)
  status      SupportTicketStatus @default(OPEN)
  assignedTo  String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  closedAt    DateTime?
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking     Booking?            @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  assignee    User?               @relation("AssignedTickets", fields: [assignedTo], references: [id], onDelete: SetNull)
  messages    TicketMessage[]

  @@map("support_tickets")
}

model TicketMessage {
  id          String        @id @default(cuid())
  ticketId    String
  senderId    String
  message     String
  isInternal  Boolean       @default(false)
  attachments String[]      @default([])
  createdAt   DateTime      @default(now())
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender      User          @relation("TicketMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("ticket_messages")
}

enum Role {
  USER
  HOST
  ADMIN
  SUPPORT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
  NOTPAID
}

enum TravelPlanStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum MessageType {
  TEXT
  FILE
  IMAGE
}

enum ContactSubject {
  GENERAL
  BOOKING
  CUSTOM
  SUPPORT
  PARTNERSHIP
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum PaymentStatus {
  PENDING
  PARTIALLY_PAID
  FULLY_PAID
  OVERDUE
  REFUNDED
  CANCELLED
}

enum PaymentType {
  PARTIAL
  FULL
  REFUND
}

enum SupportCategory {
  GENERAL
  BOOKING
  PAYMENT
  TECHNICAL
  REFUND
  CANCELLATION
  OTHER
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
}

enum GenderPreference {
  MALE_ONLY
  FEMALE_ONLY
  MIX
}
