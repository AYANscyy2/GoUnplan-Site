generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  bio            String?      @default("Travelling with vibe")
  phone          String       @unique
  password       String
  role           Role         @default(USER)
  image          String?      @default("https://avatar.iran.liara.run/public")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  appliedForHost Boolean      @default(false)
  bookings       Booking[]
  hostProfile    HostProfile?
  reviews        Review[]

  sentMessages     Message[]         @relation("SentMessages")
  receivedMessages Message[]         @relation("ReceivedMessages")
  chatParticipants ChatParticipant[]

  @@map("users")
}

model HostProfile {
  hostId        String   @id @default(cuid())
  description   String?
  image         String?  @default("https://avatar.iran.liara.run/public")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hostEmail     String   @unique
  hostMobile    String
  reviewCount   Int      @default(0)
  averageRating Float    @default(0)
  reviews       Review[]

  user        User          @relation(fields: [hostId], references: [id], onDelete: Cascade)
  travelPlans TravelPlans[]

  @@map("host_profiles")
}

model DayWiseItinerary {
  id            String      @id @default(cuid())
  dayNumber     Int
  title         String
  description   String
  activities    String[]    @default([])
  meals         String?
  accommodation String?
  travelPlanId  String
  travelPlan    TravelPlans @relation(fields: [travelPlanId], references: [travelPlanId], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("day_wise_itineraries")
}

model TravelPlans {
  travelPlanId       String             @id @default(cuid())
  title              String
  description        String
  includedActivities String[]
  restrictions       String[]
  noOfDays           Int
  hostId             String
  price              Int
  country            String
  state              String
  city               String
  status             TravelPlanStatus   @default(INACTIVE)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  maxParticipants    Int                @default(10)
  destination        String?
  filters            String[]           @default([])
  languages          String[]           @default([])
  endDate            DateTime?
  startDate          DateTime?
  bookings           Booking[]
  host               HostProfile        @relation(fields: [hostId], references: [hostId], onDelete: Cascade)
  dayWiseItinerary   DayWiseItinerary[]
  tripImage          String?            @default("https://avatar.iran.liara.run/public")
  reviewCount        Int                @default(0)
  averageRating      Float              @default(0)
  reviews            Review[]

  @@map("travel_plans")
}

model TeamMember {
  id          String   @id @default(cuid())
  isteamLead  Boolean
  phone       String
  firstName   String
  lastName    String
  memberEmail String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([bookingId, memberEmail])
  @@map("team_members")
}

model Booking {
  id                  String        @id @default(cuid())
  userId              String
  travelPlanId        String
  startDate           DateTime
  endDate             DateTime
  totalPrice          Int
  participants        Int           @default(1)
  status              BookingStatus @default(PENDING)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  guests              TeamMember[]
  specialRequirements String?
  formSubmitted       Boolean       @default(false)
  cancelledAt         DateTime?
  pricePerPerson      Int
  refundAmount        Int           @default(0)
  travelPlan          TravelPlans   @relation(fields: [travelPlanId], references: [travelPlanId])
  user                User          @relation(fields: [userId], references: [id])
  isReviewed          Boolean       @default(false)
  review              Review?

  @@map("bookings")
}

model WaitingList {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("waiting_list")
}

model Review {
  id           String   @id @default(cuid())
  userId       String
  bookingId    String   @unique
  travelPlanId String
  hostId       String
  rating       Int      @default(0)
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking    Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  travelPlan TravelPlans @relation(fields: [travelPlanId], references: [travelPlanId], onDelete: Cascade)
  host       HostProfile @relation(fields: [hostId], references: [hostId], onDelete: Cascade)

  @@map("reviews")
}

model Chat {
  id            String    @id @default(cuid())
  travelPlanId  String? // Optional: link to specific travel plan
  lastMessageAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id         String   @id @default(cuid())
  chatId     String
  userId     String
  joinedAt   DateTime @default(now())
  lastReadAt DateTime @default(now())
  isActive   Boolean  @default(true)

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id         String      @id @default(cuid())
  chatId     String
  senderId   String
  receiverId String
  content    String
  type       MessageType @default(TEXT)
  isRead     Boolean     @default(false)
  createdAt  DateTime    @default(now())

  chat     Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([chatId, createdAt])
  @@index([receiverId, isRead])
  @@map("messages")
}

enum Role {
  USER
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum TravelPlanStatus {
  ACTIVE
  INACTIVE
}

enum MessageType {
  TEXT
  FILE
  IMAGE
}

enum ContactSubject {
  GENERAL
  BOOKING
  CUSTOM
  SUPPORT
  PARTNERSHIP
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Contact {
  id        String         @id @default(cuid())
  name      String
  email     String
  subject   ContactSubject
  message   String
  status    ContactStatus  @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("contacts")
}
